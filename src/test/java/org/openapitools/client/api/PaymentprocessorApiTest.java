/*
 * Payment Processor Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import GeminiCommerce_Paymentprocessor.ApiException;
import org.openapitools.client.model.PaymentprocessorAuthorizePaymentRequest;
import org.openapitools.client.model.PaymentprocessorAuthorizePaymentResponse;
import org.openapitools.client.model.PaymentprocessorCreatePaymentMethodRequest;
import org.openapitools.client.model.PaymentprocessorFinalizePaymentRequest;
import org.openapitools.client.model.PaymentprocessorFinalizePaymentResponse;
import org.openapitools.client.model.PaymentprocessorGetAvailablePaymentMethodRequest;
import org.openapitools.client.model.PaymentprocessorGetPaymentMethodConfigurationRequest;
import org.openapitools.client.model.PaymentprocessorGetPaymentMethodConfigurationResponse;
import org.openapitools.client.model.PaymentprocessorGetPaymentMethodRequest;
import org.openapitools.client.model.PaymentprocessorInitPaymentRequest;
import org.openapitools.client.model.PaymentprocessorInitPaymentResponse;
import org.openapitools.client.model.PaymentprocessorListAvailablePaymentMethodsRequest;
import org.openapitools.client.model.PaymentprocessorListAvailablePaymentMethodsResponse;
import org.openapitools.client.model.PaymentprocessorListPaymentMethodsRequest;
import org.openapitools.client.model.PaymentprocessorListPaymentMethodsResponse;
import org.openapitools.client.model.PaymentprocessorPaymentMethod;
import org.openapitools.client.model.PaymentprocessorPerformPaymentRequest;
import org.openapitools.client.model.PaymentprocessorPerformPaymentResponse;
import org.openapitools.client.model.PaymentprocessorPerformRefundRequest;
import org.openapitools.client.model.PaymentprocessorUpdatePaymentMethodRequest;
import org.openapitools.client.model.PaymentprocessorUpdatePaymentRequest;
import org.openapitools.client.model.PaymentprocessorVoidPaymentRequest;
import org.openapitools.client.model.PaymentprocessorVoidPaymentResponse;
import org.openapitools.client.model.RpcStatus;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentprocessorApi
 */
@Disabled
public class PaymentprocessorApiTest {

    private final PaymentprocessorApi api = new PaymentprocessorApi();

    /**
     * Authorize Payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authorizePaymentTest() throws ApiException {
        PaymentprocessorAuthorizePaymentRequest body = null;
        PaymentprocessorAuthorizePaymentResponse response = api.authorizePayment(body);
        // TODO: test validations
    }

    /**
     * Create Payment Method
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPaymentMethodTest() throws ApiException {
        PaymentprocessorCreatePaymentMethodRequest body = null;
        PaymentprocessorPaymentMethod response = api.createPaymentMethod(body);
        // TODO: test validations
    }

    /**
     * Finalize Payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void finalizePaymentTest() throws ApiException {
        PaymentprocessorFinalizePaymentRequest body = null;
        PaymentprocessorFinalizePaymentResponse response = api.finalizePayment(body);
        // TODO: test validations
    }

    /**
     * Get Available Payment Method
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailablePaymentMethodTest() throws ApiException {
        PaymentprocessorGetAvailablePaymentMethodRequest body = null;
        PaymentprocessorPaymentMethod response = api.getAvailablePaymentMethod(body);
        // TODO: test validations
    }

    /**
     * Get Payment Method
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentMethodTest() throws ApiException {
        PaymentprocessorGetPaymentMethodRequest body = null;
        PaymentprocessorPaymentMethod response = api.getPaymentMethod(body);
        // TODO: test validations
    }

    /**
     * Get Payment Method Configuration
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPaymentMethodConfigurationTest() throws ApiException {
        PaymentprocessorGetPaymentMethodConfigurationRequest body = null;
        PaymentprocessorGetPaymentMethodConfigurationResponse response = api.getPaymentMethodConfiguration(body);
        // TODO: test validations
    }

    /**
     * Init Payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void initPaymentTest() throws ApiException {
        PaymentprocessorInitPaymentRequest body = null;
        PaymentprocessorInitPaymentResponse response = api.initPayment(body);
        // TODO: test validations
    }

    /**
     * List Available Payment Methods
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAvailablePaymentMethodsTest() throws ApiException {
        PaymentprocessorListAvailablePaymentMethodsRequest body = null;
        PaymentprocessorListAvailablePaymentMethodsResponse response = api.listAvailablePaymentMethods(body);
        // TODO: test validations
    }

    /**
     * List Payment Methods
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPaymentMethodsTest() throws ApiException {
        PaymentprocessorListPaymentMethodsRequest body = null;
        PaymentprocessorListPaymentMethodsResponse response = api.listPaymentMethods(body);
        // TODO: test validations
    }

    /**
     * Perform Payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performPaymentTest() throws ApiException {
        PaymentprocessorPerformPaymentRequest body = null;
        PaymentprocessorPerformPaymentResponse response = api.performPayment(body);
        // TODO: test validations
    }

    /**
     * Perform Refund
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void performRefundTest() throws ApiException {
        PaymentprocessorPerformRefundRequest body = null;
        Object response = api.performRefund(body);
        // TODO: test validations
    }

    /**
     * Update Payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentTest() throws ApiException {
        PaymentprocessorUpdatePaymentRequest body = null;
        Object response = api.updatePayment(body);
        // TODO: test validations
    }

    /**
     * Update Payment Method
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePaymentMethodTest() throws ApiException {
        PaymentprocessorUpdatePaymentMethodRequest body = null;
        PaymentprocessorPaymentMethod response = api.updatePaymentMethod(body);
        // TODO: test validations
    }

    /**
     * Void Payment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void voidPaymentTest() throws ApiException {
        PaymentprocessorVoidPaymentRequest body = null;
        PaymentprocessorVoidPaymentResponse response = api.voidPayment(body);
        // TODO: test validations
    }

}
